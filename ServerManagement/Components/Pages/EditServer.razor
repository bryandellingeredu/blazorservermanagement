@page "/servers/{id:int}"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime

<NavigationLock
    OnBeforeInternalNavigation="OnBeforeInternalNavigation"
    ConfirmExternalNavigation="true" />


<h3>Edit Server</h3>
<br/>
<br />

@if (server != null)
{
    <EditForm Model="server"  OnValidSubmit="Submit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <InputNumber @bind-Value="server.ServerId" hidden></InputNumber>

        <FieldComponent Label="Name">
            <Control>
                <InputText @bind-Value="server.Name" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => server.Name"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="City">
            <Control>
                <InputText @bind-Value="server.City" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => server.City"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="Online">
            <Control>
                <InputCheckbox @bind-Value="server.IsOnline" class="form-check-input"></InputCheckbox>
            </Control>
        </FieldComponent>


        <br />
        <button class="btn btn-primary" type="submit">Update</button>
        &nbsp;
        <a href="/servers" class="btn btn-primary" @onclick="Close">Close</a>
    </EditForm>
}





@code {
    private bool _isNavigationConfirmed = false;

    [Parameter]
    public int Id { get; set; }

    private Server? server { get; set; }

    protected override void OnParametersSet()
    {
        if (server == null)
        {
            server = ServersRepository.GetServerById(this.Id);
        }
    }

    private void Submit()
    {
        if (server != null)
        {
            ServersRepository.UpdateServer(server.ServerId, server);

        }
        _isNavigationConfirmed = true;
        NavigationManager.NavigateTo($"/servers/back_from/{this.server?.City}");
    }

    private void Close()
    {
        _isNavigationConfirmed = true;
        NavigationManager.NavigateTo("/servers");
    }


    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        if (_isNavigationConfirmed)
        {
            return; // Allow navigation without confirmation
        }
        var isConfirmed =  await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to leave this page?");
        if (!isConfirmed)
        {
            context.PreventNavigation();
        }
    }
}
